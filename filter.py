# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# focalprocess.py
# Created on: 2015-04-02 08:40:14.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy import env
env.overwriteOutput=True

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")


# Local variables:
pointtoraster = r"D:\Users\ZhangMingxi\Desktop\sample51\raster.gdb\pointtoraster"
erode = r"D:\Users\ZhangMingxi\Desktop\sample51\output.gdb\erode"
samp51 = r"D:\Users\ZhangMingxi\Desktop\sample51\raster.gdb\sample51"
dilate = r"D:\Users\ZhangMingxi\Desktop\sample51\output.gdb\dilate"
extractpoint_shp = r"D:\Users\ZhangMingxi\Desktop\sample51\raster.gdb\extractpoint"



Cellsize = "1"
Value_field = "Field3"
extractpoint_PointToRaster = r"D:\Users\ZhangMingxi\Desktop\sample51\raster.gdb\pointtoraster1"
extractpoint_temp = r"D:\Users\ZhangMingxi\Desktop\sample51\output.gdb\extractpoint"

##def erode(w):
##    Neighborhood="Rectangle "+str(w)+" "+str(w)+" CELL"
##    Statistics_min = "MINIMUM"
##    Ignore_NoData_in_calculations = "true"
##    arcpy.gp.FocalStatistics_sa(pointtoraster, erode, Neighborhood, Statistics_min, Ignore_NoData_in_calculations)
##
##def dilate(w):
##    Neighborhood="Rectangle "+str(w)+" "+str(w)+" CELL"
##    Statistics_max = "MAXIMUM"
##    Ignore_NoData_in_calculations = "true"
##    arcpy.gp.FocalStatistics_sa(erode, dilate, Neighborhood, Statistics_max, Ignore_NoData_in_calculations)


def judgeObject(heightThd):
    pointrows = arcpy.UpdateCursor(extractpoint_shp)
    for pointrow in pointrows:
        if pointrow.getValue("Field3") - pointrow.getValue("RASTERVALU") > heightThd:
            pointrow.setValue("sortTag",1)
            dilateZ= pointrow.getValue("RASTERVALU")
            pointrow.setValue("Field3",dilateZ)
            pointrow.setValue("Field5",dilateZ)
        elif pointrow.getValue("Field3") - pointrow.getValue("RASTERVALU") <= heightThd:
            pointrow.setValue("sortTag",0)
            copy = pointrow.getValue("RASTERVALU")
            pointrow.setValue("Field5",copy)
        pointrows.updateRow(pointrow)
    del pointrows,pointrow


#计算高差阈值           
def gapZ():
    pointrows = arcpy.SearchCursor(extractpoint_shp)
    arrayZ = []    
    for pointrow in pointrows:
        gapZ = pointrow.getValue("RASTERVALU")-pointrow.getValue("Field5")
        arrayZ.append(gapZ)
    dhmax = max(arrayZ)
    gap = 2*dhmax+1
    return gap
    del pointrows,pointrow

#计算最大的高程差值
def hmax():
    pointrows = arcpy.SearchCursor(samp51)
    ZZ = []    
    for pointrow in pointrows:
        Zgap = pointrow.getValue("pointZ")
        ZZ.append(Zgap)
    Zmax = max(ZZ)
    Zmin = min(ZZ)
    dhmax = Zmax-Zmin
    return dhmax
    del pointrows,pointrow



#点云处理过程
if __name__ == '__main__':
    arraythd = []
    h0 = 1
    dmax = hmax()
    for k in range(1,3):
        w = 2*k + 1 
        if w==3:
            heightThd = h0
            Neighborhood="Rectangle "+str(w)+" "+str(w)+" CELL"
            Statistics_min = "MINIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(pointtoraster, erode, Neighborhood, Statistics_min, Ignore_NoData_in_calculations)
            
            Statistics_max = "MAXIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(erode, dilate, Neighborhood, Statistics_max, Ignore_NoData_in_calculations)
            
            Append_all_the_input_raster_attributes_to_the_output_point_features = "true"
            arcpy.gp.ExtractValuesToPoints_sa(samp51, dilate, extractpoint_shp, "NONE", Append_all_the_input_raster_attributes_to_the_output_point_features)
            
            judgeObject(heightThd)
            print "第"+str(k)+"轮"
            print heightThd
        elif w>3 and heightThd<dmax:
            arcpy.PointToRaster_conversion(extractpoint_shp, Value_field, extractpoint_PointToRaster, "MOST_FREQUENT", "NONE", Cellsize)
            arcpy.DeleteField_management(extractpoint_shp, "RASTERVALU")
            
            Neighborhood="Rectangle "+str(w)+" "+str(w)+" CELL"
            Statistics_min = "MINIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(extractpoint_PointToRaster, erode, Neighborhood, Statistics_min, Ignore_NoData_in_calculations)
            
            Statistics_max = "MAXIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(erode, dilate, Neighborhood, Statistics_max, Ignore_NoData_in_calculations)
            
            Append_all_the_input_raster_attributes_to_the_output_point_features = "true"
            arcpy.gp.ExtractValuesToPoints_sa(extractpoint_shp, dilate, extractpoint_temp, "NONE", Append_all_the_input_raster_attributes_to_the_output_point_features)
            arcpy.CopyFeatures_management(extractpoint_temp, extractpoint_shp, "", "0", "0", "0")
            
            heightThd = gapZ()
            judgeObject(heightThd)
            print "第"+str(k)+"轮"
            print heightThd
        else:
            heightThd = dmax
            arcpy.PointToRaster_conversion(extractpoint_shp, Value_field, extractpoint_PointToRaster, "MOST_FREQUENT", "NONE", Cellsize)
            arcpy.DeleteField_management(extractpoint_shp, "RASTERVALU")
            Neighborhood="Rectangle "+str(w)+" "+str(w)+" CELL"
            Statistics_min = "MINIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(extractpoint_PointToRaster, erode, Neighborhood, Statistics_min, Ignore_NoData_in_calculations)
            
            Statistics_max = "MAXIMUM"
            Ignore_NoData_in_calculations = "true"
            arcpy.gp.FocalStatistics_sa(erode, dilate, Neighborhood, Statistics_max, Ignore_NoData_in_calculations)
            
            Append_all_the_input_raster_attributes_to_the_output_point_features = "true"
            arcpy.gp.ExtractValuesToPoints_sa(extractpoint_shp, dilate, extractpoint_temp, "NONE", Append_all_the_input_raster_attributes_to_the_output_point_features)
            arcpy.CopyFeatures_management(extractpoint_temp, extractpoint_shp, "", "0", "0", "0")
            judgeObject(heightThd)
            print "第"+str(k)+"轮"
            print heightThd
    print "well done!"
